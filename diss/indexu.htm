<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
    <title>Резюме &ndash; Дослідження методів створення продуктивних систем управління базами даних &ndash; Крушанов Олександр Ігорович</title>
    <link rel="stylesheet" type="text/css" href="../css/master_style.css">
    <link href="https://fonts.googleapis.com/css?family=Roboto&display=swap" rel="stylesheet">
</head>

<body lang="ua">

    <div id="navigationblock">

        <div id="topblock">
            <div id="langbox">
                <a href="index.htm"><img src="../images/ru.png" alt="Русский" title="Русский" width="24" height="20" border=0></a> &nbsp; 
                <a href="indexe.htm"><img src="../images/en.png" alt="English" title="English" width="24" height="20" border=0></a> 
            </div>
            <div id="donntu">
                <a href="http://donntu.org" target="_blank">ДонНТУ</a> &nbsp;
                <a href="http://masters.donntu.org" target="_blank" title="Перейти на портал магистров ДонНТУ">Портал магістрів</a>
            </div>
        </div> <!-- topblock --> 

        <div id="header">
            <div id="photomag">
                <a href="../krushanov_big.jpg">
                    <img src="../photo.jpg" width=180 height=240
                                         title="Магістр ДонНТУ Крушанов Олександр Ігорович"
                                         alt="Магістр ДонНТУ Крушанов Олександр Ігорович" border=0>
                                     </a>
            </div>
            <div id="headertext">
                <h1 class="hdr">Крушанов Олександр Ігорович</h1>
                <h3 class="hdr"><a href="http://cs.donntu.org" target="_blank">Факультет комп'ютерних наук та технологій</a>
                </h3>
                <h3 class="hdr"><a href="http://pi.donntu.org" target="_blank">Кафедра програмної інженерії</a></h3>
                <h3 class="hdr">Спеціальність <q>Програмна інженерія</q></h3>
                <h2 class="hdr">Дослідження методів створення продуктивних систем управління базами даних</h2>
                <h3 class="hdr">Науковий керівник: доц. каф. ПІ Грищенко Віктор Ігорович</h3>
            </div>
        </div> <!-- header -->

    </div>

    <div id="middleblock">
        <div class="menu-container">
            <div class="menu-wrapper">
                <div id="menu">
                    <li>
                        <a class="button color" href="../indexu.htm">Резюме</a>
                    </li>
                    <li>
                        <a class="button color" href="../bio/indexu.htm">Біографія</a>
                    </li>
                    <li>
                        <a class="button colorfix">Реферат</a>
                    </li>
                </div>
            </div>
        </div>
    
        <div id="maintext">
        
            <h1>Реферат за темою випускної роботи</h1>
                    
            <h2>Зміст</h2>
            <ul class=content>
                <li class=ct1><a href="#p0">Вступ</a>
                <li class=ct1><a href="#p1">1. Актуальність теми</a>
                <li class=ct1><a href="#p2">2. Мета і задачі дослідження та заплановані результати</a>
                <li class=ct1><a href="#p3">3. Огляд досліджень та розробок</a>
                <li class=ct2><a href="#p31">3.1 Огляд міжнародних джерел</a>
                <li class=ct2><a href="#p32">3.2 Огляд національних джерел</a>
                <li class=ct2><a href="#p33">3.3 Огляд локальних джерел</a>
                <li class=ct1><a href="#p4">4. Фрагментація баз даних</a>
                <li class=ct1><a href="#p5">Висновки</a>
                <li class=ct1><a href="#ref">Перелік посилань</a>
            </ul>

            <a name=p0></a>
            <h2>Вступ</h2>
            
            <p>В даний час ні один веб-сайт або серйозне додаток не може обійтися без використання баз даних. Вони використовуються для зберігання, систематизації та групування даних, завдяки чому забезпечується простота доступу до даних і цілісність інформації. Для створення, управління, адміністрування і використання баз даних використовуються спеціалізовані програми або групи програм системи управління базами даних (DBMS &ndash; Database Management System).
            
            <p>Розвиток СУБД почався в середині 60-х років XX століття при розробці космічних програм. Першою повноцінною СУБД стала ієрархічна система IMS (Information Management System). Дана система в наші дні також використовується в якості основної ієрархічної СУБД на високопродуктивних серверах. IMS є безпечним, надійним програмним забезпеченням з високою пропускною здатністю для обробки онлайн-транзакція і пакетної обробки.</p>
            
            <a name=p1></a>
            <h2>1. Актуальність теми</h2>
            
            <p>З появою технічно більш складних програмних комплексів прямо пропорційно зростає потреба в зберіганні та обробці великих обсягів інформації. Це призводить до того, що обсяги інформації, що зберігається в базах даних перевершують фізичні обмеження централізованих систем. Як наслідок, знижується продуктивність, відмовостійкість і наражається на ризик цілісність інформації, що зберігається. </p>
            
            <p>В сучасних підходах до розробки все більшої значущості набувають процеси децентралізації. Протягом останніх десятиліть розробники прагнуть проектувати географічно розподілені бази даних. Даний підхід дозволяє підвищити продуктивність БД, поліпшити захист інформації, що зберігається, забезпечити ефективні засоби реплікації даних. Однак, для досягнення вищевказаних переваг необхідно застосовувати ефективні методи проектування розподілених БД.</p>
            
            <a name=p2></a>
            <h2>2. Мета і задачі дослідження та заплановані результати</h2>
            
            <p>Метою дослідження є розробка методів проектування розподіленої бази даних, які зможуть децентралізувати базу даних, розбивши її на фрагменти. Отримані фрагменти будуть розміщені у вузлах обчислювальної мережі. На підставі отриманих методів необхідно створити алгоритми для програмного комплексу, результатами роботи яких будуть підвищення ефективності обробки запитів до розподіленої базі даних, реплікація даних, забезпечення захисту даних, що зберігаються.</p>
            
            <p>Основні завдання дослідження:</p>
            <ol>
                <li>Дослідження характеристик розподілених систем обробки даних.
                <li>Вивчення основних завдань, що входять в процес проектування розподілених баз даних.
                <li>Дослідження задач фрагментації БД, розміщення фрагментів в вузлах обчислювальної мережі.
                <li>Формування стратегії виконання запитів.
                <li>Вибір і обгрунтування критерію ефективності розподіленої БД.
                <li>Розробка алгоритмів, що описують методи фрагментації і розміщення фрагментів. Формування архітектури розподіленої БД.
                <li>Впровадження розподіленої БД в програмний комплекс.
            </ol>
            
            <p><span class = itl>Об'єкт дослідження </span>: розподілена база даних. </p>
            <p><span class = itl>Предмет дослідження </span>: моделі та алгоритми програмного комплексу, призначені для опису методики децентралізації бази даних. </p>
            
            <p>В рамках магістерської роботи планується отримання актуальних <span class = itl>наукових результатів</span> за наступними напрямками: </p>
            <ol>
                <li>Формування завдання проектування розподіленої бази даних, яка враховує особливості фрагментації БД і розміщення отриманих фрагментів.
                <li>Формування стратегії виконання запитів.
                <li>Вибір і обгрунтування критерію ефективності розподіленої БД, що враховує вплив фізичних параметрів системи на швидкість обробки запитів і коефіцієнт готовності транзакції.
            </ol>
            
            <p>Як <span class = itl>практичних результатів</span> планується розробка високонавантаженої розподіленої бази даних і її впровадження в готовий програмний комплекс по онлайн продажу квитків.</p>
            
            <a name=p3></a>
            <h2>3. Огляд досліджень та розробок</h2>
            
            <a name=p31></a>
            <h3>3.1 Огляд міжнародних джерел</h3>
            
            <p>Створення розподіленої СУБД передбачає не тільки розробку функціональних модулів, як таких, а й формальне математичний опис моделі зберігання даних і маніпулювання з ними. При проектуванні розподілених СУБД найбільш широко застосовуються методи алгебри опису операцій. Серед них можна виділити роботи Е. Кодда по реляційній алгебрі <a href="#ref1">[1]</a> і формальний опис БД як об'єктно-орієнтованої системи, запропоноване К. Бири <a href="#ref1">[2]</a>.</p>

            <p>Слід зазначити статті Б. Талхайма <a href="#ref1">[3]</a>, присвячені проектування СУБД засобами многосортность алгебри з використанням інших методів алгебри, таких як HERM-алгебра, заснована на машині абстрактних станів Ю . Гуревича. Використання алгебраїчних підходів дозволяє провести формальний опис логічного плану виконання запиту (рівень мови запиту), його трансляцію в фізичний план виконання (рівень внутрішньої обробки запитів) і, як наслідок, мати можливість проведення аналізу його оптимізації та виконання по Мікрооперацій фізичного плану <a href = "#ref1">[4]</a>. </p>

            <p>Також широко застосовується класифікація М. Стоунбрейкера для багатопроцесорних обчислювальних комплексів (МВК) <a href="#ref1">[5-7]</a>.</p>
            
            <a name=p32></a>
            <h3>3.2 Огляд національних джерел</h3>
            
            <p>У зв'язку з постійним збільшенням обсягу даних в даний час гостро стоїть питання про необхідність модернізації застарілих систем. Шалтуновіч А.В. <a href="#ref9">[10]</a> у своїй науковій статті відображає проблему великих даних щодо систем управління базами даних і розподілених інформаційних систем, що стала на сьогоднішній день ключовий в ІТ-індустрії.</p>

            <p>Одним з найбільш пріоритетних вимог, висунутих під час проектування будь-яких сучасних систем, є збереження і цілісність даних. Бєлоусов В.Є. <a href="#ref9">[9]</a> в своїй роботі описується систематизацію підходів до виконання реплікації даних, пропонує алгоритм виконання реплікації по поточному стану.</p>
            
            <p>Розподілені системи обробки даних мають ряд особливостей. Найповніше дані особливості описані в статті Цвєткова В.Я., Алпатова О.Н <a href="#ref8">[8]</a>. Також в статті розкриваються поняття розподіленої системи і розподіленої інформаційної системи. Дається класифікація розподілених систем. Зокрема, за типом наданих ресурсів: розподілені обчислювальні системи, розподілені інформаційні системи, семантичний Грід.</p>
            
            <a name=p33></a>
            <h3>3.3 Огляд локальних джерел</h3>
            
            <p>У Донецькому національному технічному університеті розроблялися наукові статті, присвячені оптимізації запитів до серверів розподіленої бази даних, підходи до оптимізації розподілу даних. У статті Баранової С.С. <a href="#ref12">[12]</a> наводиться спосіб оптимізації роботи розподіленої бази даних шляхом оптимізації розподілу даних по вузлах комп'ютерної мережі. Заславський В.А. <a href="#ref12">[13]</a> в своїй статті застосовує мурашиний алгоритм для вирішення задачі оптимізації запитів.</p>
            
            <a name=p4></a>
            <h2>4. Фрагментація баз даних</h2>
                        
            <p>Фрагментація бази даних, або шардінг &ndash; це шаблон архітектури бази даних, пов'язаний з горизонтальним секціонуванням (поділ рядків однієї таблиці на кілька різних таблиць, які називаються розділами). Кожен розділ має однакову схему і стовпці, але різні строки. Відповідно, дані, що зберігаються в кожному з них, унікальні і не залежать від даних, що зберігаються в інших розділах.</p>

            <p>Прийнято порівняти горизонтальне секціонування з вертикальним. У таблиці з вертикальним секціонуванням цілі стовпці поділяються і поміщаються в окремі таблиці. Дані, що містяться в одному вертикальному розділі, що не залежать від даних у всіх інших таких розділах, кожен з них містить як окремі рядки, так і окремі стовпці. На малюнку 1 продемонстрований процес горизонтального і вертикального секціонування таблиці.</p>
            
            <div class=img>
                <img src="images/animation.gif" alt="Процес горизонтального і вертикального секціонування таблиці">
                <p class=imgcaption>Малюнок 1 &ndash; Процес горизонтального і вертикального секціонування таблиці</p>
                <p class=imgcaption>(анімація, розмір &ndash; 57KB, 7 слайдів)</p>
            </div>
            
            <p>Фрагментація включає в себе розбиття даних на дві або кілька менших частин, які називаються логічними сегментами. Потім вони розподіляються по окремих вузлах бази даних, так званим фізичним сегментам, які можуть містити кілька логічних сегментів. Дані, що зберігаються у всіх сегментах, є цілий набір логічних даних.</p>
            
            <p>сегментована бази даних приклад архітектури без загального доступу. Це означає, що всі сегменти автономні; вони не використовують одні і ті ж дані або обчислювальні ресурси. У деяких випадках, однак, може мати сенс копіювати певні таблиці в кожен сегмент, щоб використовувати їх для довідки. Наприклад, є база даних для програми, яка залежить від фіксованих коефіцієнтів перерахунку для вимірювань ваги. Репліціруя таблицю, яка містить необхідні дані про коефіцієнт конверсії, в кожен сегмент, можливо надати кожному сегменту всі дані, необхідні для запитів.</p>
            
            <p>Часто фрагментація реалізується на прикладному рівні, тобто програма включає в себе код, який визначає, який сегмент передавати на читання і запис. Однак деякі системи управління базами даних мають вбудовані можливості фрагментації, що дозволяє реалізувати її безпосередньо на рівні бази даних.</p>
            

            <h3>4.1 Переваги фрагментації БД</h3>
            <p>Основна перевага шардінга полягає в тому, що він може спростити горизонтальне масштабування (scaling out). Горизонтальне масштабування це додавання нових машин до існуючого стеку, що дозволяє розподілити навантаження і швидше обробляти більший обсяг трафіку. Ця практика часто порівнюється з вертикальним масштабуванням (scaling up), яке включає в себе оновлення апаратного забезпечення існуючого сервера, зазвичай шляхом додавання більшого обсягу ОЗУ або ЦП.</p>
            <p>Підтримувати реляційну базу даних, що працює на одній машині, і масштабувати її вертикально в міру необхідності, оновлюючи її обчислювальні ресурси, відносно просто. Однак, в кінцевому рахунку будь-яка несегментірованная база даних буде обмежена з точки зору зберігання і обчислювальної потужності, тому можливість горизонтального масштабування робить вашу установку набагато більш гнучкою.</p>
            <p>Іншою причиною, по якій деякі вибирають архітектуру фрагментованою БД, є скорочення часу відповіді на запит. При відправці запиту до НЕ фрагментованою базі даних пошук виконується по кожному рядку в таблиці, перш ніж буде знайдений набір шуканих результатів. У додатку з великою монолітною базою даних запити можуть оброблятися дуже повільно. У сегментированной таблиці при пошуку проглядається меншу кількість рядків, а результати повертаються набагато швидше.</p>
            <p>Фрагментація може також зробити додаток більш надійним за рахунок пом'якшення наслідків збоїв. Якщо ваш додаток або веб-сайт використовує монолітну базу даних, збій може призвести до недоступності всього програми. Однак при використанні фрагментованою бази даних відключення може вплинути тільки на один сегмент даних. Деякі частини програми або веб-сайту можуть стати недоступними, але загальний вплив все одно буде менше, ніж в разі збою всієї бази даних.</p>
            
            <h3>4.2 Недоліки фрагментації БД</h3>
            <p>Хоча фрагментація бази даних може спростити масштабування і підвищити продуктивність, вона також може накладати певні обмеження. У цьому розділі ми обговоримо деякі з цих обмежень і ситуації, в яких краще взагалі не використовувати шардінг.</p>

            <p>Перша проблема, з якою люди стикаються при використанні фрагментації це складність правильної реалізації такої архітектури. Якщо фрагментировать дані неправильно, це може призвести до втрати даних або пошкодження таблиць. Але навіть якщо все зроблено правильно, фрагментація може зробити істотний вплив на робочі процеси вашої команди. Замість того щоб отримувати доступ до даних і управляти ними з однієї точки, членам команди доведеться керувати даними в декількох сегментах, що може перешкодити роботі деяких груп.</p>

            <p>Проблема, з якою іноді стикаються після фрагментації бази даних, полягає в тому, що сегменти в кінцевому підсумку сильно різняться в розмірах. Припустимо, у вас є база даних з двома окремими сегментами: один для клієнтів, чиї прізвища починаються з літер від А до М, а другий для тих, чиї прізвища починаються з літер від Н до Я. Однак додаток обслуговує дуже багато користувачів, чиї прізвища починаються з літери Г. Відповідно, перший сегмент поступово накопичує більше даних, ніж другий. Це призводить до уповільнення роботи програми при обслуговуванні значної частини ваших користувачів. У цьому випадку будь-які переваги фрагментації бази даних зводяться нанівець уповільненнями і збоями. Швидше за все, базу даних необхідно буде відновити і переналаштувати, щоб забезпечити більш рівномірний розподіл даних.</p>

            <h3>4.3 Види фрагментованих архітектур</h3>

            <p>При виконанні запитів чи розподілі вхідних даних в сегментовані таблиці або БД важливо, щоб вони передавалися в правильний сегмент. В іншому випадку це може привести до втрати даних або вкрай повільної обробки запитів. У цьому розділі ми розглянемо декілька поширених архітектур фрагментації, кожна з яких використовує трохи інший процес для розподілу даних між сегментами.</p>

            <h3>4.3.1 Фрагментація по інтервалах</h3>

            <p>Фрагментація по інтервалах має на увазі сегментування даних на основі діапазонів заданого значення. Припустимо, у вас є база даних, в якій зберігається інформація про всі продукти в каталозі. Ви можете створити кілька різних сегментів і відокремити інформацію про кожному продукті залежно від цінового діапазону, в який вони потрапляють (малюнок 2).</p>

            <div class=img>
                <img src="images/diagram1.jpg" alt="Приклад фрагментації по інтервалах">
                <p class=imgcaption>Малюнок 2 &ndash; Приклад фрагментації по інтервалах</p>
            </div>

            <p>Основна перевага цієї моделі полягає в тому, що вона відносно проста в реалізації. Кожен сегмент містить різний набір даних, але всі вони мають ідентичну схему, а також вихідну базу даних. Код додатка просто читає, в який діапазон потрапляють дані, і записує їх у відповідний фрагмент.</p>

            <p>З іншого боку, сегментування по інтервалу не захищає дані від нерівномірного розподілу, що призводить до вищезазначених hotspots. З малюнку 2 видно, що навіть якщо кожен шард містить однакову кількість даних, існує ймовірність того, що стосуються окремих товарів буде приділено більше уваги, ніж іншим. І відповідні сегменти, в свою чергу, отримають непропорційну кількість операцій читання.</p>

            <h3>4.3.2 Фрагментація по каталогам</h3>

            <p>Для реалізації цієї моделі необхідно створити і підтримувати довідкову таблицю, яка за допомогою ключа сегмента відстежує, які дані містяться в тому чи іншому сегменті. В даному контексті, довідкова таблиця це таблиця, яка містить статичний набір інформації про те, де можна знайти конкретні дані. На малюнку 3 зображено спрощений приклад сегментування по каталогам.</p>

            <div class=img>
                <img src="images/diagram2.jpg" alt="Приклад сегментування по каталогам">
                <p class=imgcaption>Малюнок 3 &ndash; Приклад сегментування по каталогам</p>
            </div>

            <p>Тут стовпець Delivery Zone визначається як ключ сегмента. Дані від ключа сегмента записуються в довідкову таблицю разом з тим сегментом, в який повинна бути записана кожна відповідний рядок. Це схоже на сегментування по інтервалах, але замість визначення діапазону, в який потрапляють дані, кожен ключ прив'язується до свого певного сегменту. Сегментування за каталогом краще, ніж сегментування по інтервалах в тих випадках, коли ключ сегмента має низьку потужність зв'язку, зберігати діапазон ключів для сегмента не має сенсу. Зверніть увагу, що ця модель також відрізняється від сегментування по ключам, оскільки вона не виконує жодних ключ сегмента за допомогою хеш-функції; вона просто перевіряє ключ по таблиці, щоб побачити, куди записати дані.</p>
            <p>Основна перевага фрагментації по каталогам це гнучкість. Архітектура сегментування по інтервалах обмежує користувачів діапазонами значень, а архітектура по ключам фіксованою хеш-функцією, яку, як згадувалося раніше, згодом може бути надзвичайно важко змінити. Сегментування за каталогом дозволяє використовувати будь-яку систему або алгоритм для введення даних в сегменти, і за допомогою цього підходу порівняно легко динамічно додавати фрагменти.</p>
            <p>Сегментування по каталогам є найбільш гнучким з розглянутих тут методів, але необхідність підключатися до таблиці перед кожним запитом або записом може негативно вплинути на продуктивність програми. Крім того, довідкова таблиця може стати єдиною точкою відмови: якщо вона пошкоджена або іншим чином вийшла з ладу, це вплине на здатність записувати або отримувати дані.</p>

            <a name=p5></a>
            <h2>Висновки</h2>
            
            <p>В рамках даної роботи були розглянуті основні способи сегментування бази даних, були виявлені особливості кожного із способів. Надалі планується застосування одного з описаних методів сегментування БД в рамках діючого проекту по онлайн продажу квитків.</p>
            <p>Магістерська робота присвячена актуальній науковій задачі дослідження методів створення продуктивних СУБД. В рамках проведених досліджень виконано:</p>
            <ol>
                <li>Розглянуто методи фрагментації баз даних.
                <li>На підставі аналізу літературних джерел виділено структура побудови продуктивних СУБД.
                <li>Сформовано і проаналізовані вимоги до продуктивних СУБД.
                <li>Формування стратегії виконання запитів.
                <li>Вибір і обгрунтування критерію ефективності розподіленої БД.
                <li>Розробка алгоритмів, що описують методи фрагментації і розміщення фрагментів. Формування архітектури розподіленої БД.
                <li>Впровадження розподіленої БД в програмний комплекс.
            </ol>
            <p>Подальші дослідження спрямовані на наступні етапи:</p>
            <ol>
                <li>Проектування і реалізація розподіленої бази даних, яка враховує особливості фрагментації БД.
                <li>Формування стратегії виконання запитів.
                <li>Обгрунтування обраного критерію ефективності розподіленої БД.
            </ol>
                    
            <p>При написанні даного реферату магістерська робота ще не завершена. Остаточне завершення: червень 2020 року. Повний текст роботи
            і матеріали по темі можуть бути отримані у автора або його керівника після зазначеної дати.</p>
            
            <a name=ref></a>
            <h2>Перелік посилань</h2>
            <ol>
                <li><a name="ref1"></a>A. E. Abbadi, D. Skeen, and F. Cristian. An Efficient, Fault-Tolerant Protocol for Replicated Data Management. &ndash; Proc. 4th ACM SIGACT-SIGMOD Symp. on Principles of Database Systems, Portland, Oreg., March 1985, pp. 215-229.
                <li><a name="ref2"></a>P. Apers, C. van den Berg, J. Flokstra, P. Grefen, M. Kersten, A. Wilschut. Prisma/DB: a Parallel Main-Memory Relational DBMS. &ndash; IEEE Trans. on Data and Knowledge Eng., 1992, 4(6), pp. 541-554.
                <li><a name="ref3"></a>D. Bell and J. Grimson. Distributed Database Systems. &ndash; Reading, MA: Addison-Wesley, 1993.
                <li><a name="ref4"></a>B. Bergsten, M. Couprie, P. Valduriez. Prototyping DBS3, a Shared-Memory Parallel Database System. &ndash; Proc. Int. Conf. on Parallel and Distributed Information Systems, Miami, Florida, December 1991, pp. 226-234.
                <li><a name="ref5"></a>G. Copeland, W. Alexander, E. Bougherty, and T. Keller. Data Placement in Bubba. &ndash; Proc. ACM SIGMOD Int. Conf. on Management of Data, Chicago, May 1988, pp. 99-108.
                <li><a name="ref6"></a>D.K. Gifford. Weighted Voting for Replicated Data. &ndash; Proc. 7th ACM Symp. on Operating System Principles, Pacific Grove, CA, December 1979, pp. 150-159.
                <li><a name="ref7"></a>M.T. Ezsu, U. Dayal, and P. Valduriez (eds). Distributed Object Management. &ndash; San Mateo: Morgan Kaufmann, 1994.
                <li><a name="ref8"></a>Цветков В.Я., Алпатов А.Н. Проблемы распределенных систем &ndash; Журнал <q>Перспективы науки и образования №6(12)</q>, Москва, 2014, стр. 31-35.
                <li><a name="ref9"></a>Белоусов В.Е. Алгоритмы репликации данных в распределенных системах обработки информации &ndash; Автореферат к рукописи, Пенза, 2005 // [Электронный ресурс]. — Режим доступа: <a href="https://static.freereferats.ru/_avtoreferats/01002750219.pdf">https://static.freereferats.ru/...</a>
                <li><a name="ref10"></a>Шалтунович А.В. Нереляционные системы хранения в условиях проблемы больших данных и распределенных вычислений &ndash; Журнал <q>Вестник Нижневартовского государственного университета</q>, Нижневартовск, 2013, стр. 31-35.
                <li><a name="ref11"></a>Баранова С.С. Динамическая оптимизация распределения данных по узлам вычислительной сети // Тезисы доклада на конференции <q>Современные информационные технологии</q>, Донецк, 2007.
                <li><a name="ref12"></a>Заславский В.А., Савкова Е.О. Оптимизация выполнения распределённых запросов // Материалы II всеукраинской научно-технической конференции студентов, аспирантов и молодых учёных &ndash; Донецьк, ДонНТУ &ndash; 2011, с. 269-273. 
            </ol>
        
        </div> <!-- maintext -->
    
    </div> <!-- middleblock -->

    <div id="menub">
        <a class="mitemb" href="../indexu.htm">Резюме</a>
        <a class="mitemb" href="../bio/indexu.htm">Біографія</a>
    </div>

</body>
</html>
