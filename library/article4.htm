<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN'>
<html>
  <head>
    <title>Б.В. Новосельский. &ndash; Метод проектирования процесса распределения реляционной базы данных</title>
    <meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
    <link rel="stylesheet" type="text/css" href="../css/master_style.css">    
    <link href="https://fonts.googleapis.com/css?family=Roboto&display=swap" rel="stylesheet">
  </head>
  <body lang=ru>
<a href="index.htm" style="margin-top: 22px;display: block;">Назад в библиотеку</a>
<br>
<hr>

<h1>Метод проектирования процесса распределения реляционной базы данных</h1>
<p style="text-indent: 0pt;"><b>Автор: </b>Б.В.&nbsp;Новосельский<br>
<b>Источник: </b><a href="https://cyberleninka.ru/article/n/metod-proektirovaniya-protsessa-raspredeleniya-relyatsionnoy-bazy-dannyh/viewer">Б.В.&nbsp;Новосельский. Метод проектирования процесса распределения реляционной базы данных / Санкт-Петербургский государственный университет информационных технологий, механики и оптики, Санкт-Петербург, 2008.</a></p>

<div align='left'>
<h3>Введение</h3>
<p>Технологии баз данных (БД) в настоящее время используются практически во всех организациях. Все большую значимость приобретают процессы децентрализации, требующие создания приложений, доступ к которым осуществляется из различных географических мест. Увеличиваются требования к оперативности и достоверности информации. Задачи информационной интеграции БД и проектирования географически распределенных БД (РБД) являются наиболее актуальными для разработчиков программного обеспечения в течение почти трех десятилетий.</p>

<p>Большинство авторов под проектированием РБД понимают фрагментацию и размещение, т.е. разбиение БД на фрагменты и принятие решения о том, где будут храниться эти фрагменты. Однако проектирование схем фрагментации и размещения отношений реляционной базы данных основывается на информации о способах и методах использования РБД. Эти методы зависят от стратегии исполнения запросов, которая, в свою очередь, должна учитывать схемы фрагментации и размещения. Следовательно, проектирование схем фрагментации и размещения, а также определение стратегии исполнения запросов должны производиться одновременно. Таким образом, задачу проектирования РБД следует формулировать так: для заданной логической схемы БД, множества запросов и конфигурации вычислительной сети (ВС) описать схему фрагментации, схему размещения фрагментов и сформировать стратегии исполнения каждого запроса таким образом, чтобы оптимизировать целевую функцию.</p>

<h3>Обзор генетических алгоритмов</h3>
<p>Все три задачи, входящие в процесс проектирования РБД, NP-полные <a href = '#lib' >[1-2]</a>, т.е. с ростом размерности задач их вычислительная сложность растет экспоненциально. Во многих работах (например, <a href = '#lib' >[3-5]</a>) отмечается, что для решения задач кластеризации и компоновки наиболее успешно применяются генетические алгоритмы.</p>

<p>В основу генетических алгоритмов положены идеи естественного отбора в биологических популяциях. В таких алгоритмах любое решение задачи синтеза представляется особями, которые характеризуются хромосомами. Хромосомы состоят из генов, значениями генов являются значения проектных параметров. Направленный перебор решений осуществляется с помощью генетических операторов выбора родителей, скрещивания, мутации, селекции, переупорядочения. Особи оцениваются с использованием функции приспособленности, определяющей, насколько хорошо особь подходит для решения данной задачи.</p>

<p>Помимо NP-полноты, задачи проектирования РБД обладают свойством взаимозависимости, т.е. входными данными для следующей задачи является решение предыдущей. Таким образом, для получения проекта РБД, близкого к оптимальному, целесообразно применять вложенные генетические алгоритмы.</p>

<p>Обзор разработанного генетического алгоритма</p>

<p>В соответствии с разработанным автором настоящей статьи методом для каждой хромосомы из внешнего алгоритма, который сформирован схемами фрагментации и размещения, запускается вложенный генетический алгоритм, предназначенный для формирования оптимальной стратегии исполнения запросов. Хромосомы вложенного алгоритма представляют собой решения, принимаемые при исполнении запроса. Комбинация хромосом из внешнего и вложенного алгоритмов полностью определяет решение поставленной задачи.</p>

<p>Сначала необходимо сформировать пространство поиска схем фрагментации, размещения и стратегии исполнения запросов, затем схемы должны быть представлены в виде хромосом. Пространство поиска схемы фрагментации формируется разбиением отношений на минимальные, не делимые далее, фрагменты. Для получения такого набора фрагментов для каждого отношения R на основании транзакций определяются набор минтермов предикатов и группы атрибутов. Разбиение на предикаты характеризует горизонтальную фрагментацию, а группы атрибутов &ndash; вертикальную.</p>

<p>Схема размещения кодируется бинарной матрицей D, строками которой являются узлы ВС, а столбцами &ndash; сформированный набор фрагментов. Единица в ячейке матрицы означает наличие определенного фрагмента в узле ВС. Для обеспечения полноты схемы размещения каждый фрагмент должен находиться хотя бы в одном узле (в каждом столбце должна быть хотя бы одна единица).</p>

<p>При исполнении реляционного запроса необходимо принять следующие решения.</p>
<ul>
  <li>В какой последовательности производить операции соединения отношений.</li>
  <li>В каком узле производить операцию соединения.</li>
  <li>Применять ли технику semi-join (неполное соединение) <a href = '#lib' >[6]</a> при соединении. Эта техника используется при соединении отношений, находящихся в разных узлах: пусть отношение A находится в узле 1 и отношение B находится в узле 2; принцип semi-join заключается в отправке на узел 2 столбцов отношения A, по которым осуществляется соединение, нахождение и отправка на узел 1 только тех записей из B, которые удовлетворяют условию соединения.</li>
  <li>Применять ли технику double-pipelined hash-join (двойное конвейерное хэш-соединение) <a href = '#lib' >[7]</a> при соединении. Идея double-pipelined hash-join состоит в формировании двух хэш-таблиц Ha и Hb, после чего записи из A и B обрабатываются по одной в каждый момент времени. Для записи из A в таблице Hb ищутся соответствующие ей вложения, после чего запись из A и найденные записи из B возвращаются как результаты соединения, и запись из A помещается в хэш-таблицу Ha. Далее, берется запись из B и обрабатывается аналогичным образом.</li>
  <li>Какие узлы сети, содержащие необходимые фрагменты, использовать при внутриопе-раторном параллелизме.</li>
</ul>

<p>Функцией приспособленности вложенного алгоритма является критерий оптимальности РБД. Для всех запросов производится расчет сокращения времени исполнения за счет применения внутриоператорного параллелизма и расчет коэффициентов использования ресурсов.</p>

<p>После останова вложенного алгоритма значение функции приспособленности лучшей хромосомы используется как оценка функции приспособленности внешнего алгоритма. Критерием останова алгоритмов является cхождение популяции.</p>

<p>Для оценки качества предложенного генетического алгоритма был проведен эксперимент, в котором решения, найденные с помощью этого алгоритма, сравнивались с оптимальными. Использовался следующий критерий эффективности БД (рис. 1).</p>

<div class=img>
  <img src='images/article4_pic1.png' alt='Рисунок 1 &ndash; Формула для подсчёта критерия эффективности БД' hspace='10' vspace='10'>
  <p class=imgcaption>Рисунок 1 &ndash; Формула для подсчёта критерия эффективности БД</p>
</div>

<p>Где: k — количество узлов ВС; п — количество запросов; fij — частота возникновения i-го запроса в j-м узле; Qij — временной коэффициенту j-го запроса, порожденного в i-м узле; Wij — коэффициент использования ресурсов при обработке j-го запроса, порожденного в i-м узле; с и са — коэффициенты, определяющие приоритеты времени ответа и готовности транзакции, значения ct и са находятся в интервале [0...1] и определяются проектировщиком.</p>

<p>Временной коэффициент j-го запроса определяется как Qij=Tif/TiJ, т.е. равен отношению времени ответа на запрос, исполненный в РБД, к расчетному времени ответа на запрос, исполненный локально в узле i, при условии наличия в узле всех необходимых фрагментов. Коэффициент использования ресурсов Wij равен сумме коэффициентов использования центрального процессора и внешнего запоминающего устройства узлов, вовлеченных в операцию, и коэффициента использования сетевых ресурсов.</p>

<p>Эксперимент проводился для следующей вычислительной системы: ВС состоит из трех узлов, равноудаленных друг от друга; логическая схема БД имеет 2 отношения; производится 3 запроса на выборку и 2 запроса на обновление данных, которые формируют 4 группы атрибутов и 5 предикатов.</p>

<h3>Выводы</h3>

<p>По результатам измерений были определены оптимальные значения параметров генетических алгоритмов, приведенные на рисунке 2. Запуск алгоритма с другими значениями параметров ухудшает результат или увеличивает время работы.</p>

<div class=img>
  <img src='images/article4_pic2.png' alt='Рисунок 2 &ndash; Оптимальные значения параметров генетических алгоритмов' hspace='10' vspace='10'>
  <p class=imgcaption>Рисунок 2 &ndash; Оптимальные значения параметров генетических алгоритмов</p>
</div>

<p>Схождение популяций, при котором 90 % лучших особей имеют расхождение по значению функции приспособленности не более, чем на 10 %, наблюдалось примерно спустя 500—700 поколений внешнего генетического алгоритма и 2500—3000 поколений вложенного алгоритма. Отметим, что для различных значений ct и ca удалось найти оптимальное решение, полученное полным перебором. Кроме этого, с увеличением пространства возможных решений (количества фрагментов и узлов ВС) время работы генетического алгоритма увеличивается квадратично, тогда как поиск оптимального решения путем полного перебора растет экспоненциально.</p>

<p>В дальнейшем необходимо исследовать зависимость скорости схождения популяций от параметров генетического алгоритма.</p>

<p>Разработанная прикладная программа, реализующая предложенный алгоритм, может быть положена в основу создания САПР распределенной базы данных.</p>

<a name='lib'></a>
<h3>Список использованной литературы</h3>
<p style="text-indent: 0pt;">
  1. Ahmad I., Karlapalem K., Kwok Y.K. et al. Evolutionary algorithms for allocating data in distributed database systems // Distributed and Parallel Databases. 2002. Vol. 11, N 1. P. 5—32.</br>
  2. Apers P. M. G. Data allocation in distributed database systems // ACM Trans. on Database Systems. 1988. Vol. 13, N 3. P. 263—304.</br>
  3. Rho S., March S. T. Optimizing distributed join queries: A genetic algorithm approach // Annals of Operations Research. 1997. Vol. 71. P. 199—228.</br>
  4. Wang J.-C., Horng J.-T., Hsu Y.-M. et al. A genetic algorithm for set query optimization in distributed database systems // Proc. of the IEEE Intern. Conf. on Systems, Man and Cybernetics. Beijing, China. 1996. P. 1977—1982.</br>
  5. Норенков И. П. Эвристики и их комбинации в генетических методах дискретной оптимизации // Информационные технологии. 1999. № 1. С. 2—7.</br>
  6. Bernstein P. A., Goodman N., Wong E. et al. Query processing in a system for distributed databases (SDD-1) // ACM Trans. on Database Systems. 1981. Vol. 6, N 4. P. 602—625.</br>
  7. Wilschut A. N., Apers P. M. G. Dataflow query execution in a parallel main-memory environment // Distributed and Parallel Databases. 1993. Vol. 1, N 1. P. 103—128.</br>
</p>
</div>
